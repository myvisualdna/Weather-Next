{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n//Esta es una accion ASYNCRONA:\n//Ejecuta una accion (llama a un api) y llama a una\n//segunda accion (pasandole lo que recogio de la API)\nimport axios from \"axios\"; //Importamos la accion que queremos despachar al final\n\nimport FetchOneApiImperial from \"./firstOneImperial\";\nconst API_KEY = \"35b09d50704a6a177c25bda05c32f780\"; //Esta es una funcion asyncrona: es decir no solo ejecuta\n//una accion (llamando a la primera api), sino que tambien despacha\n//una segunda accion (fetchOneApi) pasando los valores\n//obtuvo de la respuesta de esta API\n\nexport default function FetchOneAsyncImperial(city) {\n  const request = axios.get(`https://api.openweathermap.org/data/2.5/weather?q=${city},${city}&appid=${API_KEY}&units=imperial`); //Lo levantado por la API se llamara data.\n  //Se dispara una accion llamada FETCH_WEATHER que de ser\n  //admitida por el reducer modificara el state con lo que\n  //contenga el payload: es decir data, es decir lo levantado\n  //por la API\n\n  return dispatch => {\n    request.then(({\n      data\n    }) => {\n      dispatch({\n        type: \"FETCH_WEATHER\",\n        payload: _objectSpread(_objectSpread({}, data), {}, {\n          imperial: true\n        })\n      });\n      console.log(data); //Recogimos info de la API, le damos nombre y\n      //despachamos una nueva accion, pasandole esos\n      //valores\n\n      const lat = data.coord.lat;\n      const lon = data.coord.lon;\n      console.log(lat);\n      console.log(lon);\n      dispatch(FetchOneApiImperial(lat, lon));\n    });\n  };\n}","map":{"version":3,"sources":["/Users/andresnieves/Documents/React/arietis/redux/actions/firstImperial.js"],"names":["axios","FetchOneApiImperial","API_KEY","FetchOneAsyncImperial","city","request","get","dispatch","then","data","type","payload","imperial","console","log","lat","coord","lon"],"mappings":";;;;;;AAAA;AACA;AACA;AAEA,OAAOA,KAAP,MAAkB,OAAlB,C,CACA;;AACA,OAAOC,mBAAP,MAAgC,oBAAhC;AAEA,MAAMC,OAAO,GAAG,kCAAhB,C,CAEA;AACA;AACA;AACA;;AACA,eAAe,SAASC,qBAAT,CAA+BC,IAA/B,EAAqC;AAClD,QAAMC,OAAO,GAAGL,KAAK,CAACM,GAAN,CACb,qDAAoDF,IAAK,IAAGA,IAAK,UAASF,OAAQ,iBADrE,CAAhB,CADkD,CAKlD;AACA;AACA;AACA;AACA;;AACA,SAAQK,QAAD,IAAc;AACnBF,IAAAA,OAAO,CAACG,IAAR,CAAa,CAAC;AAAEC,MAAAA;AAAF,KAAD,KAAc;AACzBF,MAAAA,QAAQ,CAAC;AACPG,QAAAA,IAAI,EAAE,eADC;AAEPC,QAAAA,OAAO,kCACFF,IADE;AAELG,UAAAA,QAAQ,EAAE;AAFL;AAFA,OAAD,CAAR;AAOAC,MAAAA,OAAO,CAACC,GAAR,CAAYL,IAAZ,EARyB,CAUzB;AACA;AACA;;AACA,YAAMM,GAAG,GAAGN,IAAI,CAACO,KAAL,CAAWD,GAAvB;AACA,YAAME,GAAG,GAAGR,IAAI,CAACO,KAAL,CAAWC,GAAvB;AACAJ,MAAAA,OAAO,CAACC,GAAR,CAAYC,GAAZ;AACAF,MAAAA,OAAO,CAACC,GAAR,CAAYG,GAAZ;AACAV,MAAAA,QAAQ,CAACN,mBAAmB,CAACc,GAAD,EAAME,GAAN,CAApB,CAAR;AACD,KAlBD;AAmBD,GApBD;AAqBD","sourcesContent":["//Esta es una accion ASYNCRONA:\n//Ejecuta una accion (llama a un api) y llama a una\n//segunda accion (pasandole lo que recogio de la API)\n\nimport axios from \"axios\";\n//Importamos la accion que queremos despachar al final\nimport FetchOneApiImperial from \"./firstOneImperial\";\n\nconst API_KEY = \"35b09d50704a6a177c25bda05c32f780\";\n\n//Esta es una funcion asyncrona: es decir no solo ejecuta\n//una accion (llamando a la primera api), sino que tambien despacha\n//una segunda accion (fetchOneApi) pasando los valores\n//obtuvo de la respuesta de esta API\nexport default function FetchOneAsyncImperial(city) {\n  const request = axios.get(\n    `https://api.openweathermap.org/data/2.5/weather?q=${city},${city}&appid=${API_KEY}&units=imperial`\n  );\n\n  //Lo levantado por la API se llamara data.\n  //Se dispara una accion llamada FETCH_WEATHER que de ser\n  //admitida por el reducer modificara el state con lo que\n  //contenga el payload: es decir data, es decir lo levantado\n  //por la API\n  return (dispatch) => {\n    request.then(({ data }) => {\n      dispatch({\n        type: \"FETCH_WEATHER\",\n        payload: {\n          ...data,\n          imperial: true,\n        },\n      });\n      console.log(data);\n\n      //Recogimos info de la API, le damos nombre y\n      //despachamos una nueva accion, pasandole esos\n      //valores\n      const lat = data.coord.lat;\n      const lon = data.coord.lon;\n      console.log(lat);\n      console.log(lon);\n      dispatch(FetchOneApiImperial(lat, lon));\n    });\n  };\n}\n"]},"metadata":{},"sourceType":"module"}