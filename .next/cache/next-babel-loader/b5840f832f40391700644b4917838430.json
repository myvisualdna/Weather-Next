{"ast":null,"code":"//Esta es una accion ASYNCRONA:\n//Ejecuta una accion (llama a un api) y llama a una\n//segunda accion (pasandole lo que recogio de la API)\nimport axios from \"axios\"; //Importamos la accion que queremos despachar al final\n\nimport FetchOneApi from \"./fetchOne\";\nvar API_KEY = \"35b09d50704a6a177c25bda05c32f780\"; //Esta es una funcion asyncrona: es decir no solo ejecuta\n//una accion (llamando a la primera api), sino que tambien despacha\n//una segunda accion (fetchOneApi) pasando los valores\n//obtuvo de la respuesta de esta API\n\nexport default function FetchOneAsync(city) {\n  var request = axios.get(\"https://api.openweathermap.org/data/2.5/weather?q=\".concat(city, \",\").concat(city, \"&appid=\").concat(API_KEY, \"&units=metric\")); //Lo levantado por la API se llamara data.\n  //Se dispara una accion llamada FETCH_WEATHER que de ser\n  //admitida por el reducer modificara el state con lo que\n  //contenga el payload: es decir data, es decir lo levantado\n  //por la API\n\n  return function (dispatch) {\n    request.then(function (_ref) {\n      var data = _ref.data;\n      dispatch({\n        type: \"FETCH_WEATHER\",\n        payload: data\n      });\n      console.log(data); //Recogimos info de la API, le damos nombre y\n      //despachamos una nueva accion, pasandole esos\n      //valores\n\n      var lat = data.coord.lat;\n      var lon = data.coord.lon;\n      console.log(lat);\n      console.log(lon);\n      dispatch(FetchOneApi(lat, lon));\n    });\n  };\n}\n_c = FetchOneAsync;\n\nvar _c;\n\n$RefreshReg$(_c, \"FetchOneAsync\");","map":{"version":3,"sources":["/Users/andresnieves/Documents/React/arietis/redux/actions/firstFetch.js"],"names":["axios","FetchOneApi","API_KEY","FetchOneAsync","city","request","get","dispatch","then","data","type","payload","console","log","lat","coord","lon"],"mappings":"AAAA;AACA;AACA;AAEA,OAAOA,KAAP,MAAkB,OAAlB,C,CACA;;AACA,OAAOC,WAAP,MAAwB,YAAxB;AAEA,IAAMC,OAAO,GAAG,kCAAhB,C,CAEA;AACA;AACA;AACA;;AACA,eAAe,SAASC,aAAT,CAAuBC,IAAvB,EAA6B;AAC1C,MAAMC,OAAO,GAAGL,KAAK,CAACM,GAAN,6DACuCF,IADvC,cAC+CA,IAD/C,oBAC6DF,OAD7D,mBAAhB,CAD0C,CAK1C;AACA;AACA;AACA;AACA;;AACA,SAAO,UAACK,QAAD,EAAc;AACnBF,IAAAA,OAAO,CAACG,IAAR,CAAa,gBAAc;AAAA,UAAXC,IAAW,QAAXA,IAAW;AACzBF,MAAAA,QAAQ,CAAC;AAAEG,QAAAA,IAAI,EAAE,eAAR;AAAyBC,QAAAA,OAAO,EAAEF;AAAlC,OAAD,CAAR;AACAG,MAAAA,OAAO,CAACC,GAAR,CAAYJ,IAAZ,EAFyB,CAIzB;AACA;AACA;;AACA,UAAMK,GAAG,GAAGL,IAAI,CAACM,KAAL,CAAWD,GAAvB;AACA,UAAME,GAAG,GAAGP,IAAI,CAACM,KAAL,CAAWC,GAAvB;AACAJ,MAAAA,OAAO,CAACC,GAAR,CAAYC,GAAZ;AACAF,MAAAA,OAAO,CAACC,GAAR,CAAYG,GAAZ;AACAT,MAAAA,QAAQ,CAACN,WAAW,CAACa,GAAD,EAAME,GAAN,CAAZ,CAAR;AACD,KAZD;AAaD,GAdD;AAeD;KAzBuBb,a","sourcesContent":["//Esta es una accion ASYNCRONA:\n//Ejecuta una accion (llama a un api) y llama a una\n//segunda accion (pasandole lo que recogio de la API)\n\nimport axios from \"axios\";\n//Importamos la accion que queremos despachar al final\nimport FetchOneApi from \"./fetchOne\";\n\nconst API_KEY = \"35b09d50704a6a177c25bda05c32f780\";\n\n//Esta es una funcion asyncrona: es decir no solo ejecuta\n//una accion (llamando a la primera api), sino que tambien despacha\n//una segunda accion (fetchOneApi) pasando los valores\n//obtuvo de la respuesta de esta API\nexport default function FetchOneAsync(city) {\n  const request = axios.get(\n    `https://api.openweathermap.org/data/2.5/weather?q=${city},${city}&appid=${API_KEY}&units=metric`\n  );\n\n  //Lo levantado por la API se llamara data.\n  //Se dispara una accion llamada FETCH_WEATHER que de ser\n  //admitida por el reducer modificara el state con lo que\n  //contenga el payload: es decir data, es decir lo levantado\n  //por la API\n  return (dispatch) => {\n    request.then(({ data }) => {\n      dispatch({ type: \"FETCH_WEATHER\", payload: data });\n      console.log(data);\n\n      //Recogimos info de la API, le damos nombre y\n      //despachamos una nueva accion, pasandole esos\n      //valores\n      const lat = data.coord.lat;\n      const lon = data.coord.lon;\n      console.log(lat);\n      console.log(lon);\n      dispatch(FetchOneApi(lat, lon));\n    });\n  };\n}\n"]},"metadata":{},"sourceType":"module"}